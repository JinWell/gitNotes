/// <reference path="../../typings/html5.d.ts" />
(function (context) {
    const POSITIONS = {
        center: 0,
        top: -1,
        left: -1,
        bottom: 1,
        right: 1,
    };
    const CONFIG = {
        WrapperID: 'window_resizer_tooltip_wrapper',
        HideTimeout: 2000,
        ZoomFactor: 1,
        Position: ['bottom', 'right']
    };
    const SLOTS = {
        WindowWidth: null,
        WindowHeight: null,
        ViewportWidth: null,
        ViewportHeight: null,
        CloseButton: null,
        SettingsButton: null
    };
    const STATE = {
        NeedsUpdate: false,
        PendingHide: null
    };
    const Runtime = {
        addEventListener: function (listener) {
            !chrome.runtime.onMessage.hasListener(listener)
                && chrome.runtime.onMessage.addListener(listener);
        },
        removeEventListener: function (listener) {
            try {
                chrome.runtime.onMessage.removeListener(listener);
            }
            catch (ex) { }
        },
        invoke: function (action, parameters) {
            return new Promise((resolve, reject) => {
                chrome.runtime.sendMessage({ action, parameters }, resolve);
            });
        },
        getURL: function (asset) {
            return chrome.extension.getURL(asset);
        }
    };
    let Tooltip = document.getElementById(CONFIG.WrapperID);
    Tooltip && Tooltip.remove();
    Promise.all([
        Runtime.invoke('tooltip-hide-delay'),
        Runtime.invoke('tooltip-position'),
        Runtime.invoke('get-zoom')
    ]).then(([delay, position, zoom]) => {
        CONFIG.HideTimeout = delay.data;
        CONFIG.Position = (position.data && position.data.length == 2) ? position.data : CONFIG.Position;
        CONFIG.ZoomFactor = context.devicePixelRatio / zoom.data;
        _init();
    });
    function _init() {
        let link = document.createElement('link');
        link.addEventListener('load', e => {
            Tooltip = document.createElement('div');
            Tooltip.id = CONFIG.WrapperID;
            Tooltip.setAttribute('data-pos-y', CONFIG.Position[0]);
            Tooltip.setAttribute('data-pos-x', CONFIG.Position[1]);
            let template = link.import.querySelector('template');
            let ShadowRoot = Tooltip.attachShadow({ mode: 'closed' });
            ShadowRoot.appendChild(document.importNode(template.content, true));
            ShadowRoot.querySelector('.logo').addEventListener('mousedown', _dragStart);
            SLOTS.WindowWidth = ShadowRoot.querySelector('.primary .width');
            SLOTS.WindowHeight = ShadowRoot.querySelector('.primary .height');
            SLOTS.ViewportWidth = ShadowRoot.querySelector('.secondary .width');
            SLOTS.ViewportHeight = ShadowRoot.querySelector('.secondary .height');
            SLOTS.CloseButton = ShadowRoot.querySelector('.close');
            SLOTS.SettingsButton = ShadowRoot.querySelector('.settings');
            document.body.appendChild(Tooltip);
            enable();
            function _dragStart(evt) {
                Tooltip.classList.add('dragging');
                document.addEventListener('mousemove', _dragUpdate);
                document.addEventListener('mouseup', _dragEnd);
                document.body.style.cursor = 'move';
            }
            function _dragEnd(evt) {
                Tooltip.classList.remove('dragging');
                document.removeEventListener('mousemove', _dragUpdate);
                document.removeEventListener('mouseup', _dragEnd);
                document.body.style.cursor = 'initial';
                Runtime.invoke('save-settings', {
                    tooltipPosition: CONFIG.Position
                });
            }
            function _dragUpdate(evt) {
                if (!evt.clientX && !evt.clientY) {
                    return;
                }
                evt.stopPropagation();
                evt.preventDefault();
                let xSegment = window.innerWidth / 3;
                let ySegment = window.innerHeight / 3;
                let xAxis = 'left';
                let yAxis = 'top';
                if (evt.clientX > xSegment * 1)
                    xAxis = 'center';
                if (evt.clientX > xSegment * 2)
                    xAxis = 'right';
                if (evt.clientY > ySegment * 1)
                    yAxis = 'center';
                if (evt.clientY > ySegment * 2)
                    yAxis = 'bottom';
                CONFIG.Position[0] != yAxis && Tooltip.setAttribute('data-pos-y', yAxis);
                CONFIG.Position[1] != xAxis && Tooltip.setAttribute('data-pos-x', xAxis);
                if (CONFIG.Position[0] != yAxis || CONFIG.Position[1] != xAxis) {
                    CONFIG.Position = [yAxis, xAxis];
                    Tooltip.style.transform = _getTransform();
                }
            }
        });
        link.rel = 'import';
        link.href = Runtime.getURL('assets/tpl/resize-tooltip.html');
        // Apparently Chrome crashes when injecting an `import` link into the
        // document before the `readyState` is "complete"
        // (found on Google Drive)
        function _inject() {
            if (document.readyState === 'complete') {
                document.removeEventListener('readystatechange', _inject);
                document.querySelector('head').appendChild(link);
            }
        }
        if (document.readyState !== 'complete') {
            document.addEventListener('readystatechange', _inject);
        }
        else {
            _inject();
        }
    }
    function _toggleEventListeners(state) {
        let action = state ? 'addEventListener' : 'removeEventListener';
        Runtime[action](handleExtensionRequest);
        context[action]('resize', update, false);
        Tooltip[action]('mouseover', showOn);
        Tooltip[action]('mouseout', delayedHide);
        SLOTS.CloseButton[action]('click', disable);
        SLOTS.SettingsButton[action]('click', openSettings);
    }
    function _getTransform() {
        const scale = CONFIG.ZoomFactor / context.devicePixelRatio;
        const posY = POSITIONS[CONFIG.Position[0]];
        const posX = POSITIONS[CONFIG.Position[1]];
        let left = posX * -24 + window.innerWidth / scale * (posX + 1) / 2 - Tooltip.offsetWidth / scale * (posX + 1) / 2;
        let top = posY * -24 + window.innerHeight / scale * (posY + 1) / 2 - Tooltip.offsetHeight / scale * (posY + 1) / 2;
        return `scale(${scale}) translateY(${top}px) translateX(${left}px)`;
    }
    function enable() {
        // read the opacity to kick-start the initial CSS fade-in animation
        // (it wouldn't otherwise animate when adding the `.visible` class right after
        // appending the node to the body - most likely because of some Chrome bug)
        context.getComputedStyle(Tooltip).opacity;
        _toggleEventListeners(true);
        //show();
    }
    function disable() {
        _toggleEventListeners(false);
        hide().then(() => {
            Tooltip.remove();
            Tooltip = null;
        });
    }
    function openSettings() {
        Runtime.invoke('open-settings', '#settings/tooltip');
    }
    function show(autoHide) {
        Tooltip.classList.add('visible');
        cancelDelayedHide();
        update();
        autoHide !== false && delayedHide();
    }
    function showOn() {
        show(false);
    }
    function hide() {
        Tooltip.classList.remove('visible');
        cancelDelayedHide();
        STATE.NeedsUpdate = false;
        return new Promise((done) => setTimeout(done, 300));
    }
    function delayedHide() {
        cancelDelayedHide();
        STATE.PendingHide = setTimeout(hide, CONFIG.HideTimeout);
    }
    function cancelDelayedHide() {
        clearTimeout(STATE.PendingHide);
        STATE.PendingHide = null;
    }
    function update() {
        if (!Tooltip.parentNode) {
            disable();
            return;
        }
        if (!STATE.NeedsUpdate) {
            STATE.NeedsUpdate = true;
            context.requestAnimationFrame(_update);
        }
    }
    function _update() {
        STATE.NeedsUpdate = false;
        Tooltip.style.transform = _getTransform();
        SLOTS.WindowWidth.innerHTML = context.innerWidth;
        SLOTS.WindowHeight.innerHTML = context.innerHeight;
        SLOTS.ViewportWidth.innerHTML = context.outerWidth;
        SLOTS.ViewportHeight.innerHTML = context.outerHeight;
        !isVisible() && show();
    }
    function isVisible() {
        return Tooltip && Tooltip.classList.contains('visible');
    }
    function handleExtensionRequest(msg, sender, respond) {
        if (typeof msg === 'string') {
            msg = { command: msg };
        }
        switch (msg.command) {
            case 'STATUS':
                respond(isVisible() ? 'VISIBLE' : 'HIDDEN');
                break;
            case 'SET_HIDE_DELAY':
                CONFIG.HideTimeout = msg.delay || CONFIG.HideTimeout;
                break;
            case 'DISABLE':
                disable();
                break;
            case 'SHOW':
                show();
                break;
            case 'HIDE':
                hide();
                break;
            case 'TOGGLE':
                isVisible() ? hide() : show();
                break;
        }
    }
})(this);

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9TY3JpcHRzL2VuYWJsZS10b29sdGlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlEQUFpRDtBQUVqRCxDQUFDLFVBQVMsT0FBTztJQUNoQixNQUFNLFNBQVMsR0FBRztRQUNqQixNQUFNLEVBQUcsQ0FBQztRQUNWLEdBQUcsRUFBTSxDQUFDLENBQUM7UUFDWCxJQUFJLEVBQUssQ0FBQyxDQUFDO1FBQ1gsTUFBTSxFQUFHLENBQUM7UUFDVixLQUFLLEVBQUksQ0FBQztLQUNWLENBQUE7SUFFRCxNQUFNLE1BQU0sR0FBRztRQUNkLFNBQVMsRUFBSyxnQ0FBZ0M7UUFDOUMsV0FBVyxFQUFHLElBQUk7UUFDbEIsVUFBVSxFQUFJLENBQUM7UUFDZixRQUFRLEVBQU0sQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO0tBQ2pDLENBQUM7SUFFRixNQUFNLEtBQUssR0FBRztRQUNiLFdBQVcsRUFBTSxJQUFJO1FBQ3JCLFlBQVksRUFBSyxJQUFJO1FBQ3JCLGFBQWEsRUFBSSxJQUFJO1FBQ3JCLGNBQWMsRUFBRyxJQUFJO1FBQ3JCLFdBQVcsRUFBTSxJQUFJO1FBQ3JCLGNBQWMsRUFBRyxJQUFJO0tBQ3JCLENBQUM7SUFFRixNQUFNLEtBQUssR0FBRztRQUNiLFdBQVcsRUFBRyxLQUFLO1FBQ25CLFdBQVcsRUFBRyxJQUFJO0tBQ2xCLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNmLGdCQUFnQixFQUFFLFVBQVMsUUFBUTtZQUNsQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7bUJBQzNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBRUQsbUJBQW1CLEVBQUUsVUFBUyxRQUFRO1lBQ3JDLElBQUksQ0FBQztnQkFDSixNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLENB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RSxPQUFPO1FBQ25ELEVBQUUsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDN0IsR0FBRyxHQUFHLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBQyxDQUFBO1FBQ3JCLENBQUM7UUFFRCxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyQixLQUFLLFFBQVE7Z0JBQ1osT0FBTyxDQUFDLFNBQVMsRUFBRSxHQUFHLFNBQVMsR0FBRyxRQUFRLENBQUMsQ0FBQztnQkFDN0MsS0FBSyxDQUFDO1lBRU4sS0FBSyxnQkFBZ0I7Z0JBQ3BCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsR0FBRyxDQUFDLEtBQUssSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDO2dCQUN0RCxLQUFLLENBQUM7WUFFTixLQUFLLFNBQVM7Z0JBQ2IsT0FBTyxFQUFFLENBQUM7Z0JBQ1gsS0FBSyxDQUFDO1lBRU4sS0FBSyxNQUFNO2dCQUNWLElBQUksRUFBRSxDQUFDO2dCQUNSLEtBQUssQ0FBQztZQUVOLEtBQUssTUFBTTtnQkFDVixJQUFJLEVBQUUsQ0FBQztnQkFDUixLQUFLLENBQUM7WUFFTixLQUFLLFFBQVE7Z0JBQ1osU0FBUyxFQUFFLEdBQUcsSUFBSSxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUM7Z0JBQy9CLEtBQUssQ0FBQztRQUNQLENBQUM7SUFDRixDQUFDO0FBQ0YsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMiLCJmaWxlIjoic2NyaXB0cy9lbmFibGUtdG9vbHRpcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi8uLi90eXBpbmdzL2h0bWw1LmQudHNcIiAvPlxyXG5cclxuKGZ1bmN0aW9uKGNvbnRleHQpIHtcclxuXHRjb25zdCBQT1NJVElPTlMgPSB7XHJcblx0XHRjZW50ZXIgOiAwLFxyXG5cdFx0dG9wICAgIDogLTEsXHJcblx0XHRsZWZ0ICAgOiAtMSxcclxuXHRcdGJvdHRvbSA6IDEsXHJcblx0XHRyaWdodCAgOiAxLFxyXG5cdH1cclxuXHJcblx0Y29uc3QgQ09ORklHID0ge1xyXG5cdFx0V3JhcHBlcklEICAgOiAnd2luZG93X3Jlc2l6ZXJfdG9vbHRpcF93cmFwcGVyJyxcclxuXHRcdEhpZGVUaW1lb3V0IDogMjAwMCxcclxuXHRcdFpvb21GYWN0b3IgIDogMSxcclxuXHRcdFBvc2l0aW9uICAgIDogWydib3R0b20nLCAncmlnaHQnXVxyXG5cdH07XHJcblxyXG5cdGNvbnN0IFNMT1RTID0ge1xyXG5cdFx0V2luZG93V2lkdGggICAgOiBudWxsLFxyXG5cdFx0V2luZG93SGVpZ2h0ICAgOiBudWxsLFxyXG5cdFx0Vmlld3BvcnRXaWR0aCAgOiBudWxsLFxyXG5cdFx0Vmlld3BvcnRIZWlnaHQgOiBudWxsLFxyXG5cdFx0Q2xvc2VCdXR0b24gICAgOiBudWxsLFxyXG5cdFx0U2V0dGluZ3NCdXR0b24gOiBudWxsXHJcblx0fTtcclxuXHJcblx0Y29uc3QgU1RBVEUgPSB7XHJcblx0XHROZWVkc1VwZGF0ZSA6IGZhbHNlLFxyXG5cdFx0UGVuZGluZ0hpZGUgOiBudWxsXHJcblx0fVxyXG5cclxuXHRjb25zdCBSdW50aW1lID0ge1xyXG5cdFx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24obGlzdGVuZXIpIHtcclxuXHRcdFx0IWNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5oYXNMaXN0ZW5lcihsaXN0ZW5lcilcclxuXHRcdFx0XHQmJiBjaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIobGlzdGVuZXIpO1xyXG5cdFx0fSxcclxuXHJcblx0XHRyZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbihsaXN0ZW5lcikge1xyXG5cdFx0XHR0cnkge1xyXG5cdFx0XHRcdGNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5yZW1vdmVMaXN0ZW5lcihsaXN0ZW5lcik7XHJcblx0XHRcdH0gY2F0Y2ggKGV4KSB7fVxyXG5cdFx0fSxcclxuXHJcblx0XHRpbnZva2U6IGZ1bmN0aW9uKGFjdGlvbiwgcGFyYW1ldGVycz8pIHtcclxuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuXHRcdFx0XHRjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7YWN0aW9uLCBwYXJhbWV0ZXJzfSwgcmVzb2x2ZSk7XHJcblx0XHRcdH0pXHJcblx0XHR9LFxyXG5cclxuXHRcdGdldFVSTDogZnVuY3Rpb24oYXNzZXQpIHtcclxuXHRcdFx0cmV0dXJuIGNocm9tZS5leHRlbnNpb24uZ2V0VVJMKGFzc2V0KTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxldCBUb29sdGlwOiBIVE1MRWxlbWVudCA9IDxIVE1MRWxlbWVudD4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoQ09ORklHLldyYXBwZXJJRCk7XHJcblxyXG5cdFRvb2x0aXAgJiYgVG9vbHRpcC5yZW1vdmUoKTtcclxuXHJcblx0UHJvbWlzZS5hbGwoW1xyXG5cdFx0UnVudGltZS5pbnZva2UoJ3Rvb2x0aXAtaGlkZS1kZWxheScpLFxyXG5cdFx0UnVudGltZS5pbnZva2UoJ3Rvb2x0aXAtcG9zaXRpb24nKSxcclxuXHRcdFJ1bnRpbWUuaW52b2tlKCdnZXQtem9vbScpXHJcblx0XSkudGhlbigoW2RlbGF5LCBwb3NpdGlvbiwgem9vbV06IGFueSkgPT4ge1xyXG5cdFx0Q09ORklHLkhpZGVUaW1lb3V0ID0gZGVsYXkuZGF0YTtcclxuXHRcdENPTkZJRy5Qb3NpdGlvbiAgICA9IChwb3NpdGlvbi5kYXRhICYmIHBvc2l0aW9uLmRhdGEubGVuZ3RoID09IDIpID8gcG9zaXRpb24uZGF0YSA6IENPTkZJRy5Qb3NpdGlvbjtcclxuXHRcdENPTkZJRy5ab29tRmFjdG9yICA9IGNvbnRleHQuZGV2aWNlUGl4ZWxSYXRpbyAvIHpvb20uZGF0YTtcclxuXHJcblx0XHRfaW5pdCgpO1xyXG5cdH0pO1xyXG5cclxuXHRmdW5jdGlvbiBfaW5pdCgpIHtcclxuXHRcdGxldCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpO1xyXG5cdFx0bGluay5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XHJcblx0XHRcdFRvb2x0aXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuXHRcdFx0VG9vbHRpcC5pZCA9IENPTkZJRy5XcmFwcGVySUQ7XHJcblx0XHRcdFRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXBvcy15JywgQ09ORklHLlBvc2l0aW9uWzBdKTtcclxuXHRcdFx0VG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zLXgnLCBDT05GSUcuUG9zaXRpb25bMV0pO1xyXG5cclxuXHRcdFx0bGV0IHRlbXBsYXRlID0gPEhUTUxUZW1wbGF0ZUVsZW1lbnQ+IGxpbmsuaW1wb3J0LnF1ZXJ5U2VsZWN0b3IoJ3RlbXBsYXRlJyk7XHJcblx0XHRcdGxldCBTaGFkb3dSb290ID0gVG9vbHRpcC5hdHRhY2hTaGFkb3coe21vZGU6ICdjbG9zZWQnfSk7XHJcblxyXG5cdFx0XHRTaGFkb3dSb290LmFwcGVuZENoaWxkKGRvY3VtZW50LmltcG9ydE5vZGUodGVtcGxhdGUuY29udGVudCwgdHJ1ZSkpO1xyXG5cdFx0XHRTaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5sb2dvJykuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgX2RyYWdTdGFydCk7XHJcblxyXG5cdFx0XHRTTE9UUy5XaW5kb3dXaWR0aCAgICA9IFNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnByaW1hcnkgLndpZHRoJyk7XHJcblx0XHRcdFNMT1RTLldpbmRvd0hlaWdodCAgID0gU2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcucHJpbWFyeSAuaGVpZ2h0Jyk7XHJcblx0XHRcdFNMT1RTLlZpZXdwb3J0V2lkdGggID0gU2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuc2Vjb25kYXJ5IC53aWR0aCcpO1xyXG5cdFx0XHRTTE9UUy5WaWV3cG9ydEhlaWdodCA9IFNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnNlY29uZGFyeSAuaGVpZ2h0Jyk7XHJcblx0XHRcdFNMT1RTLkNsb3NlQnV0dG9uICAgID0gU2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKCcuY2xvc2UnKTtcclxuXHRcdFx0U0xPVFMuU2V0dGluZ3NCdXR0b24gPSBTaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5ncycpO1xyXG5cclxuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChUb29sdGlwKTtcclxuXHRcdFx0ZW5hYmxlKCk7XHJcblxyXG5cdFx0XHRmdW5jdGlvbiBfZHJhZ1N0YXJ0KGV2dCkge1xyXG5cdFx0XHRcdFRvb2x0aXAuY2xhc3NMaXN0LmFkZCgnZHJhZ2dpbmcnKTtcclxuXHRcdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBfZHJhZ1VwZGF0ZSk7XHJcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIF9kcmFnRW5kKTtcclxuXHRcdFx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0ZnVuY3Rpb24gX2RyYWdFbmQoZXZ0KSB7XHJcblx0XHRcdFx0VG9vbHRpcC5jbGFzc0xpc3QucmVtb3ZlKCdkcmFnZ2luZycpO1xyXG5cdFx0XHRcdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIF9kcmFnVXBkYXRlKTtcclxuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgX2RyYWdFbmQpO1xyXG5cdFx0XHRcdGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gJ2luaXRpYWwnO1xyXG5cclxuXHRcdFx0XHRSdW50aW1lLmludm9rZSgnc2F2ZS1zZXR0aW5ncycsIHtcclxuXHRcdFx0XHRcdHRvb2x0aXBQb3NpdGlvbjogQ09ORklHLlBvc2l0aW9uXHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdGZ1bmN0aW9uIF9kcmFnVXBkYXRlKGV2dCkge1xyXG5cdFx0XHRcdGlmICghZXZ0LmNsaWVudFggJiYgIWV2dC5jbGllbnRZKSB7XHJcblx0XHRcdFx0XHRyZXR1cm47XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRldnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblx0XHRcdFx0ZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG5cdFx0XHRcdGxldCB4U2VnbWVudCA9IHdpbmRvdy5pbm5lcldpZHRoIC8gMztcclxuXHRcdFx0XHRsZXQgeVNlZ21lbnQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgLyAzO1xyXG5cdFx0XHRcdGxldCB4QXhpcyAgICA9ICdsZWZ0JztcclxuXHRcdFx0XHRsZXQgeUF4aXMgICAgPSAndG9wJztcclxuXHJcblx0XHRcdFx0aWYgKGV2dC5jbGllbnRYID4geFNlZ21lbnQgKiAxKSB4QXhpcyA9ICdjZW50ZXInO1xyXG5cdFx0XHRcdGlmIChldnQuY2xpZW50WCA+IHhTZWdtZW50ICogMikgeEF4aXMgPSAncmlnaHQnO1xyXG5cclxuXHRcdFx0XHRpZiAoZXZ0LmNsaWVudFkgPiB5U2VnbWVudCAqIDEpIHlBeGlzID0gJ2NlbnRlcic7XHJcblx0XHRcdFx0aWYgKGV2dC5jbGllbnRZID4geVNlZ21lbnQgKiAyKSB5QXhpcyA9ICdib3R0b20nO1xyXG5cclxuXHRcdFx0XHRDT05GSUcuUG9zaXRpb25bMF0gIT0geUF4aXMgJiYgVG9vbHRpcC5zZXRBdHRyaWJ1dGUoJ2RhdGEtcG9zLXknLCB5QXhpcyk7XHJcblx0XHRcdFx0Q09ORklHLlBvc2l0aW9uWzFdICE9IHhBeGlzICYmIFRvb2x0aXAuc2V0QXR0cmlidXRlKCdkYXRhLXBvcy14JywgeEF4aXMpO1xyXG5cclxuXHRcdFx0XHRpZiAoQ09ORklHLlBvc2l0aW9uWzBdICE9IHlBeGlzIHx8IENPTkZJRy5Qb3NpdGlvblsxXSAhPSB4QXhpcykge1xyXG5cdFx0XHRcdFx0Q09ORklHLlBvc2l0aW9uID0gW3lBeGlzLCB4QXhpc107XHJcblx0XHRcdFx0XHRUb29sdGlwLnN0eWxlLnRyYW5zZm9ybSA9IF9nZXRUcmFuc2Zvcm0oKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cclxuXHRcdGxpbmsucmVsICA9ICdpbXBvcnQnO1xyXG5cdFx0bGluay5ocmVmID0gUnVudGltZS5nZXRVUkwoJ2Fzc2V0cy90cGwvcmVzaXplLXRvb2x0aXAuaHRtbCcpO1xyXG5cclxuXHRcdC8vIEFwcGFyZW50bHkgQ2hyb21lIGNyYXNoZXMgd2hlbiBpbmplY3RpbmcgYW4gYGltcG9ydGAgbGluayBpbnRvIHRoZVxyXG5cdFx0Ly8gZG9jdW1lbnQgYmVmb3JlIHRoZSBgcmVhZHlTdGF0ZWAgaXMgXCJjb21wbGV0ZVwiXHJcblx0XHQvLyAoZm91bmQgb24gR29vZ2xlIERyaXZlKVxyXG5cdFx0ZnVuY3Rpb24gX2luamVjdCgpIHtcclxuXHRcdFx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcclxuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdyZWFkeXN0YXRlY2hhbmdlJywgX2luamVjdCk7XHJcblx0XHRcdFx0ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaGVhZCcpLmFwcGVuZENoaWxkKGxpbmspO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0aWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdjb21wbGV0ZScpIHtcclxuXHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVhZHlzdGF0ZWNoYW5nZScsIF9pbmplY3QpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0X2luamVjdCgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX3RvZ2dsZUV2ZW50TGlzdGVuZXJzKHN0YXRlKSB7XHJcblx0XHRsZXQgYWN0aW9uID0gc3RhdGUgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XHJcblxyXG5cdFx0UnVudGltZVthY3Rpb25dKGhhbmRsZUV4dGVuc2lvblJlcXVlc3QpO1xyXG5cdFx0Y29udGV4dFthY3Rpb25dKCdyZXNpemUnLCB1cGRhdGUsIGZhbHNlKTtcclxuXHRcdFRvb2x0aXBbYWN0aW9uXSgnbW91c2VvdmVyJywgc2hvd09uKTtcclxuXHRcdFRvb2x0aXBbYWN0aW9uXSgnbW91c2VvdXQnLCBkZWxheWVkSGlkZSk7XHJcblx0XHRTTE9UUy5DbG9zZUJ1dHRvblthY3Rpb25dKCdjbGljaycsIGRpc2FibGUpO1xyXG5cdFx0U0xPVFMuU2V0dGluZ3NCdXR0b25bYWN0aW9uXSgnY2xpY2snLCBvcGVuU2V0dGluZ3MpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gX2dldFRyYW5zZm9ybSgpIHtcclxuXHRcdGNvbnN0IHNjYWxlID0gQ09ORklHLlpvb21GYWN0b3IgLyBjb250ZXh0LmRldmljZVBpeGVsUmF0aW87XHJcblx0XHRjb25zdCBwb3NZICA9IFBPU0lUSU9OU1tDT05GSUcuUG9zaXRpb25bMF1dO1xyXG5cdFx0Y29uc3QgcG9zWCAgPSBQT1NJVElPTlNbQ09ORklHLlBvc2l0aW9uWzFdXTtcclxuXHJcblx0XHRsZXQgbGVmdCA9IHBvc1ggKiAtMjQgKyB3aW5kb3cuaW5uZXJXaWR0aCAvIHNjYWxlICogKHBvc1ggKyAxKSAvIDIgLSBUb29sdGlwLm9mZnNldFdpZHRoIC8gc2NhbGUgKiAocG9zWCArIDEpIC8gMjtcclxuXHRcdGxldCB0b3AgID0gcG9zWSAqIC0yNCArIHdpbmRvdy5pbm5lckhlaWdodCAvIHNjYWxlICogKHBvc1kgKyAxKSAvIDIgLSBUb29sdGlwLm9mZnNldEhlaWdodCAvIHNjYWxlICogKHBvc1kgKyAxKSAvIDI7XHJcblxyXG5cdFx0cmV0dXJuIGBzY2FsZSgke3NjYWxlfSkgdHJhbnNsYXRlWSgke3RvcH1weCkgdHJhbnNsYXRlWCgke2xlZnR9cHgpYDtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGVuYWJsZSgpIHtcclxuXHRcdC8vIHJlYWQgdGhlIG9wYWNpdHkgdG8ga2ljay1zdGFydCB0aGUgaW5pdGlhbCBDU1MgZmFkZS1pbiBhbmltYXRpb25cclxuXHRcdC8vIChpdCB3b3VsZG4ndCBvdGhlcndpc2UgYW5pbWF0ZSB3aGVuIGFkZGluZyB0aGUgYC52aXNpYmxlYCBjbGFzcyByaWdodCBhZnRlclxyXG5cdFx0Ly8gYXBwZW5kaW5nIHRoZSBub2RlIHRvIHRoZSBib2R5IC0gbW9zdCBsaWtlbHkgYmVjYXVzZSBvZiBzb21lIENocm9tZSBidWcpXHJcblx0XHRjb250ZXh0LmdldENvbXB1dGVkU3R5bGUoVG9vbHRpcCkub3BhY2l0eTtcclxuXHJcblx0XHRfdG9nZ2xlRXZlbnRMaXN0ZW5lcnModHJ1ZSk7XHJcblx0XHQvL3Nob3coKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XHJcblx0XHRfdG9nZ2xlRXZlbnRMaXN0ZW5lcnMoZmFsc2UpO1xyXG5cdFx0aGlkZSgpLnRoZW4oKCkgPT4ge1xyXG5cdFx0XHRUb29sdGlwLnJlbW92ZSgpO1xyXG5cdFx0XHRUb29sdGlwID0gbnVsbDtcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gb3BlblNldHRpbmdzKCkge1xyXG5cdFx0UnVudGltZS5pbnZva2UoJ29wZW4tc2V0dGluZ3MnLCAnI3NldHRpbmdzL3Rvb2x0aXAnKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNob3coYXV0b0hpZGU/KSB7XHJcblx0XHRUb29sdGlwLmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuXHRcdGNhbmNlbERlbGF5ZWRIaWRlKCk7XHJcblx0XHR1cGRhdGUoKTtcclxuXHJcblx0XHRhdXRvSGlkZSAhPT0gZmFsc2UgJiYgZGVsYXllZEhpZGUoKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHNob3dPbigpIHtcclxuXHRcdHNob3coZmFsc2UpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaGlkZSgpIHtcclxuXHRcdFRvb2x0aXAuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG5cdFx0Y2FuY2VsRGVsYXllZEhpZGUoKTtcclxuXHRcdFNUQVRFLk5lZWRzVXBkYXRlID0gZmFsc2U7XHJcblxyXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlKChkb25lKSA9PiBzZXRUaW1lb3V0KGRvbmUsIDMwMCkpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZGVsYXllZEhpZGUoKSB7XHJcblx0XHRjYW5jZWxEZWxheWVkSGlkZSgpO1xyXG5cdFx0U1RBVEUuUGVuZGluZ0hpZGUgPSBzZXRUaW1lb3V0KGhpZGUsIENPTkZJRy5IaWRlVGltZW91dCk7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBjYW5jZWxEZWxheWVkSGlkZSgpIHtcclxuXHRcdGNsZWFyVGltZW91dChTVEFURS5QZW5kaW5nSGlkZSk7XHJcblx0XHRTVEFURS5QZW5kaW5nSGlkZSA9IG51bGw7XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiB1cGRhdGUoKSB7XHJcblx0XHRpZiAoIVRvb2x0aXAucGFyZW50Tm9kZSkge1xyXG5cdFx0XHRkaXNhYmxlKCk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoIVNUQVRFLk5lZWRzVXBkYXRlKSB7XHJcblx0XHRcdFNUQVRFLk5lZWRzVXBkYXRlID0gdHJ1ZTtcclxuXHRcdFx0Y29udGV4dC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoX3VwZGF0ZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBfdXBkYXRlKCkge1xyXG5cdFx0U1RBVEUuTmVlZHNVcGRhdGUgPSBmYWxzZTtcclxuXHJcblx0XHRUb29sdGlwLnN0eWxlLnRyYW5zZm9ybSA9IF9nZXRUcmFuc2Zvcm0oKTtcclxuXHJcblx0XHRTTE9UUy5XaW5kb3dXaWR0aC5pbm5lckhUTUwgICAgPSBjb250ZXh0LmlubmVyV2lkdGg7XHJcblx0XHRTTE9UUy5XaW5kb3dIZWlnaHQuaW5uZXJIVE1MICAgPSBjb250ZXh0LmlubmVySGVpZ2h0O1xyXG5cdFx0U0xPVFMuVmlld3BvcnRXaWR0aC5pbm5lckhUTUwgID0gY29udGV4dC5vdXRlcldpZHRoO1xyXG5cdFx0U0xPVFMuVmlld3BvcnRIZWlnaHQuaW5uZXJIVE1MID0gY29udGV4dC5vdXRlckhlaWdodDtcclxuXHJcblx0XHQhaXNWaXNpYmxlKCkgJiYgc2hvdygpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gaXNWaXNpYmxlKCkge1xyXG5cdFx0cmV0dXJuIFRvb2x0aXAgJiYgVG9vbHRpcC5jbGFzc0xpc3QuY29udGFpbnMoJ3Zpc2libGUnKTtcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIGhhbmRsZUV4dGVuc2lvblJlcXVlc3QobXNnLCBzZW5kZXIsIHJlc3BvbmQpIHtcclxuXHRcdGlmICh0eXBlb2YgbXNnID09PSAnc3RyaW5nJykge1xyXG5cdFx0XHRtc2cgPSB7Y29tbWFuZDogbXNnfVxyXG5cdFx0fVxyXG5cclxuXHRcdHN3aXRjaCAobXNnLmNvbW1hbmQpIHtcclxuXHRcdFx0Y2FzZSAnU1RBVFVTJzpcclxuXHRcdFx0XHRyZXNwb25kKGlzVmlzaWJsZSgpID8gJ1ZJU0lCTEUnIDogJ0hJRERFTicpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1NFVF9ISURFX0RFTEFZJzpcclxuXHRcdFx0XHRDT05GSUcuSGlkZVRpbWVvdXQgPSBtc2cuZGVsYXkgfHwgQ09ORklHLkhpZGVUaW1lb3V0O1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ0RJU0FCTEUnOlxyXG5cdFx0XHRcdGRpc2FibGUoKTtcclxuXHRcdFx0YnJlYWs7XHJcblxyXG5cdFx0XHRjYXNlICdTSE9XJzpcclxuXHRcdFx0XHRzaG93KCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cclxuXHRcdFx0Y2FzZSAnSElERSc6XHJcblx0XHRcdFx0aGlkZSgpO1xyXG5cdFx0XHRicmVhaztcclxuXHJcblx0XHRcdGNhc2UgJ1RPR0dMRSc6XHJcblx0XHRcdFx0aXNWaXNpYmxlKCkgPyBoaWRlKCkgOiBzaG93KCk7XHJcblx0XHRcdGJyZWFrO1xyXG5cdFx0fVxyXG5cdH1cclxufSkodGhpcyk7XHJcbiJdfQ==
